{"version":3,"sources":["webpack:///./src/app/server.service.ts","webpack:///./src async","webpack:///./src/main.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Http, Response } from \"@angular/http\";\r\nimport 'rxjs/Rx'\r\n@Injectable()\r\nexport class ServerService {\r\n    constructor(private http: Http) { }\r\n\r\n    postServer(reqBody: any) {\r\n        // return this.http.post('https://abdelghaffardemo.firebaseio.com/data.json', reqBody)\r\n        return this.http.put('https://abdelghaffardemo.firebaseio.com/data.json', reqBody)\r\n    }\r\n\r\n    getServer() {\r\n        return this.http.get('https://abdelghaffardemo.firebaseio.com/data.json')\r\n            .map((response: Response) => { return response.json() });\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/server.service.ts","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 221;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src async\n// module id = 221\n// module chunks = 2","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\nimport { environment } from './environments/environment';\nimport { AppModule } from './app/app.module';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import { Component, OnInit } from '@angular/core';\nimport { ServerService } from './server.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  ngOnInit(): void {\n    this.getServers()\n  }\n  constructor(private serverService: ServerService) { }\n  servers = [\n    {\n      name: 'Testserver',\n      capacity: 10,\n      id: this.generateId()\n    },\n    {\n      name: 'Liveserver',\n      capacity: 100,\n      id: this.generateId()\n    }\n  ];\n  onAddServer(name: string) {\n    this.servers.push({\n      name: name,\n      capacity: 50,\n      id: this.generateId()\n    });\n  }\n  onSave() {\n    this.serverService.postServer(this.servers).subscribe(\n      (response) => {\n        console.log(response);\n      },\n      (error) => {\n        console.log(error);\n      }\n    )\n  }\n  getServers() {\n    this.serverService.getServer().subscribe(\n      (response) => {\n        this.servers = response\n        console.log(response);\n      },\n      (error) => {\n        console.log(error);\n      }\n    )\n  }\n  private generateId() {\n    return Math.round(Math.random() * 10000);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\n\nimport { AppComponent } from './app.component';\nimport { ServerService } from './server.service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule\n  ],\n  providers: [ServerService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".container {\\n  margin-top: 50px;\\n}\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.css\n// module id = 285\n// module chunks = 2","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-xs-12 col-sm-10 col-md-8 col-sm-offset-1 col-md-offset-2\\\">\\n      <input type=\\\"text\\\" #serverName>\\n      <button class=\\\"btn btn-primary\\\" (click)=\\\"onAddServer(serverName.value)\\\">Add Server</button>\\n      <br><br>\\n      <button class=\\\"btn btn-primary\\\" (click)=\\\"onSave()\\\">Save Server</button>\\n      <br><br>\\n      <button class=\\\"btn btn-primary\\\" (click)=\\\"getServers()\\\">Get Servers</button>\\n      <hr>\\n      <ul class=\\\"list-group\\\" *ngFor=\\\"let server of servers\\\">\\n        <li class=\\\"list-group-item\\\">{{ server.name }} (ID: {{ server.id }})</li>\\n      </ul>\\n    </div>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = 287\n// module chunks = 2"],"sourceRoot":""}